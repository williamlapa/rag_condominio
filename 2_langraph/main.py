from agent import SolarCondominiumQA
from IPython.display import display, Markdown
from datetime import datetime
import os

def get_model_name(llm):
    """Fun√ß√£o segura para obter o nome do modelo de qualquer provider"""
    try:
        # Para OpenAI e DeepSeek
        if hasattr(llm, 'model_name'):
            return llm.model_name
        # Para Google Gemini
        elif hasattr(llm, 'model'):
            return llm.model
        # Para Claude
        elif hasattr(llm, 'model_id'):
            return llm.model_id
        # Para Groq
        elif hasattr(llm, 'model_name'):
            return llm.model_name
        else:
            return "Modelo desconhecido"
    except:
        return "Modelo n√£o identificado"

class ConsolidatedReportManager:
    """Gerencia relat√≥rio consolidado de todos os modelos testados"""
    
    def __init__(self):
        self.consolidated_data = {}
        self.session_timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        
    def add_model_responses(self, provider, model_name, qa_agent):
        """Adiciona respostas de um modelo ao relat√≥rio consolidado"""
        if not qa_agent.session.conversation_history:
            return
            
        self.consolidated_data[provider] = {
            'model_name': model_name,
            'responses': qa_agent.session.conversation_history
        }
    
    def export_consolidated_report(self, filename=None):
        """Exporta relat√≥rio consolidado comparando todos os modelos"""
        if not self.consolidated_data:
            print("‚ö†Ô∏è Nenhum dado consolidado para exportar")
            return
        
        if filename is None:
            filename = f"relatorio_consolidado_modelos_{self.session_timestamp}.md"
        
        # Cabe√ßalho do relat√≥rio
        markdown_content = f"""# Relat√≥rio Consolidado - Condom√≠nio Solar Trindade

**Data da Avalia√ß√£o**: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}  
**Modelos Testados**: {len(self.consolidated_data)}  
**Total de Perguntas**: {len(list(self.consolidated_data.values())[0]['responses']) if self.consolidated_data else 0}

## Modelos Avaliados

"""
        
        # Lista dos modelos testados
        for provider, data in self.consolidated_data.items():
            markdown_content += f"- **{provider.upper()}**: {data['model_name']}\n"
        
        markdown_content += "\n---\n\n"
        
        # Para cada pergunta, mostra respostas de todos os modelos
        if self.consolidated_data:
            total_questions = len(list(self.consolidated_data.values())[0]['responses'])
            
            for q_idx in range(total_questions):
                # Pega a pergunta (assumindo que √© a mesma para todos os modelos)
                question = list(self.consolidated_data.values())[0]['responses'][q_idx]['question']
                
                markdown_content += f"## Pergunta {q_idx + 1}\n\n**{question}**\n\n"
                
                # Respostas de cada modelo
                for provider, data in self.consolidated_data.items():
                    if q_idx < len(data['responses']):
                        answer = data['responses'][q_idx]['answer']
                        # Resumir resposta se muito longa (mant√©m primeiros 500 chars + indica√ß√£o)
                        if len(answer) > 800:
                            answer = answer[:500] + "\n\n*[Resposta resumida - vers√£o completa dispon√≠vel nos logs individuais]*"
                        
                        markdown_content += f"### {provider.upper()} ({data['model_name']})\n\n{answer}\n\n"
                
                markdown_content += "---\n\n"
        
        # Se√ß√£o de observa√ß√µes
        markdown_content += """## Observa√ß√µes Metodol√≥gicas

- **Objetivo**: Comparar respostas de diferentes modelos LLM nas mesmas perguntas sobre documentos do condom√≠nio
- **Crit√©rios de Avalia√ß√£o**: Precis√£o, relev√¢ncia, completude e objetividade das respostas
- **Limita√ß√µes**: Respostas muito longas foram resumidas para facilitar compara√ß√£o
- **Fonte dos Dados**: Base de conhecimento do Condom√≠nio Solar Trindade (RAG)

---

*Relat√≥rio gerado automaticamente pelo Sistema de Q&A do Condom√≠nio Solar Trindade*
"""
        
        # Escreve no arquivo
        try:
            with open(filename, 'w', encoding='utf-8') as f:
                f.write(markdown_content)
            print(f"‚úÖ Relat√≥rio consolidado exportado para '{filename}'")
            return filename
        except Exception as e:
            print(f"‚ùå Erro ao exportar relat√≥rio consolidado: {str(e)}")
            return None

def export_responses_to_markdown(qa_agent, filename="respostas_condominio.md"):
    """Exporta respostas individuais (mantida para compatibilidade)"""
    if not qa_agent.session.conversation_history:
        print("‚ö†Ô∏è Nenhuma resposta no hist√≥rico para exportar")
        return
    
    # Obter nome do modelo de forma segura
    model_name = get_model_name(qa_agent.llm_manager.llm)
    
    # Cabe√ßalho do arquivo
    markdown_content = f"""# Relat√≥rio Individual - Condom√≠nio Solar Trindade\n\n
                        **Modelo utilizado**: {model_name}\n
                        **Data da sess√£o**: {qa_agent.session.session_id.split('_')[1]}\n
                        **Total de perguntas**: {len(qa_agent.session.conversation_history)}\n\n
                        ---\n\n"""
    
    # Adiciona cada Q&A
    for i, qa in enumerate(qa_agent.session.conversation_history, 1):
        markdown_content += f"""## Pergunta {i}\n**{qa['question']}**\n\n
                                ### Resposta\n{qa['answer']}\n\n
                                ---\n\n"""
    
    # Escreve no arquivo
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
        print(f"‚úÖ Respostas exportadas para '{filename}'")
    except Exception as e:
        print(f"‚ùå Erro ao exportar: {str(e)}")

def run_solar_qa_demo(provider: str = "openai", report_manager=None):
    """Executa demonstra√ß√£o do agente Solar Q&A com exporta√ß√£o"""
    print(f"\nüè¢ === TESTANDO MODELO: {provider.upper()} ===")
    print("="*60)
    
    qa_agent = SolarCondominiumQA(provider=provider)
    
    # Obter nome do modelo de forma segura
    model_name = get_model_name(qa_agent.llm_manager.llm)
    
    print(f"üìä **Informa√ß√µes da Sess√£o:**")
    print(f"  ‚Ä¢ Modelo: {model_name}")
    for key, value in qa_agent.get_session_info().items():
        if key not in ["retriever_initialized", "documents_loaded"]:
            print(f"  ‚Ä¢ {key}: {value}")
    
    print("\n" + "="*60)
    
    # Perguntas de exemplo
    sample_questions = [
        # üìù Atas e Reuni√µes
        "Quando ocorreu a √∫ltima assembleia ou reuni√£o registrada do condom√≠nio?",
        "Liste as datas das cinco assembleias ou reuni√µes mais recentes, em ordem cronol√≥gica.",
        "Quais foram os t√≥picos principais discutidos na assembleia mais recente do condom√≠nio?",
        "Quem s√£o os atuais membros do conselho fiscal, conforme os documentos mais recentes?",
        "De acordo com a √∫ltima ata de assembleia, qual √© o valor atual da taxa condominial definida para os cond√¥minos?",

        # üìÑ Contratos
        "Quais contratos ativos o condom√≠nio possui atualmente e com quais empresas foram firmados?",
        "Qual √© o valor mensal acordado no contrato de presta√ß√£o de servi√ßos manuten√ß√£o de elevadores?",
        "H√° cl√°usulas com penalidades previstas para rescis√£o antecipada de algum contrato? Se sim, quais?",
        "Quando foi firmado o contrato mais recente e qual √© o prazo de vig√™ncia previsto?",
        "Existe algum contrato relacionado √† manuten√ß√£o predial, elevadores ou seguran√ßa eletr√¥nica? Qual o conte√∫do principal?"
    ]

    for i, question in enumerate(sample_questions, 1):
        print(f"\nüî∏ **Pergunta {i}/{len(sample_questions)}**")
        qa_agent.ask_and_display(question, show_process=(i == 1))
        if i < len(sample_questions):
            print("\n" + "-"*40)
    
    # Adiciona ao relat√≥rio consolidado se o manager foi fornecido
    if report_manager:
        report_manager.add_model_responses(provider, model_name, qa_agent)
    
    # Exporta as respostas individuais (opcional)
    # export_filename = f"respostas_{provider}_{qa_agent.session.session_id.split('_')[1]}.md"
    # export_responses_to_markdown(qa_agent, export_filename)
    
    return qa_agent

if __name__ == "__main__":
    
    # Inicializa o gerenciador de relat√≥rio consolidado
    report_manager = ConsolidatedReportManager()
    
    # Escolha dos modelos
    providers = [
        "openai", 
        "gemini", 
        # "claude",        
        "deepseek"
    ]

    print("üöÄ INICIANDO AVALIA√á√ÉO COMPARATIVA DE MODELOS")
    print("="*80)

    # Testa cada modelo
    for provider in providers:
        try:
            run_solar_qa_demo(provider, report_manager)
        except Exception as e:
            print(f"‚ùå Erro ao testar {provider}: {str(e)}")
            continue
    
    # Exporta o relat√≥rio consolidado final
    print("\n" + "="*80)
    print("üìä GERANDO RELAT√ìRIO CONSOLIDADO...")
    consolidated_filename = report_manager.export_consolidated_report()
    
    if consolidated_filename:
        print(f"üéâ Avalia√ß√£o completa! Relat√≥rio dispon√≠vel em: {consolidated_filename}")
    else:
        print("‚ö†Ô∏è N√£o foi poss√≠vel gerar o relat√≥rio consolidado")